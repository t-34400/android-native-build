name: Fetch ExecuTorch arm64-v8a

on:
  workflow_dispatch:
    inputs:
      version:
        description: "ExecuTorch version tag (e.g. 0.7.0)"
        required: true
        default: "0.7.0"

jobs:
  fetch:
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ inputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Prepare tools
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y curl unzip rsync

      - name: Download AAR (+ sha256) from S3
        run: |
          set -euo pipefail
          mkdir -p work
          cd work
          AAR_URL="https://ossci-android.s3.amazonaws.com/executorch/release/${VERSION}/executorch.aar"
          SHAS_URL="https://ossci-android.s3.amazonaws.com/executorch/release/${VERSION}/executorch.aar.sha256sums"
          curl -fL -o executorch.aar "${AAR_URL}"
          if curl -fL -o executorch.aar.sha256sums "${SHAS_URL}"; then
            sha256sum -c executorch.aar.sha256sums
          else
            echo "WARNING: Missing sha256sums for version ${VERSION} â€” skipping verification."
          fi

      - name: Extract .so from AAR (arm64-v8a only)
        run: |
          set -euo pipefail
          mkdir -p libs/arm64-v8a
          unzip -j work/executorch.aar "jni/arm64-v8a/*.so" -d libs/arm64-v8a

      - name: Fetch headers from GitHub tag and stage into jni/include
        run: |
          set -euo pipefail
          TAG="v${VERSION}"
          curl -fL -o "executorch-${TAG}.tar.gz" \
            "https://github.com/pytorch/executorch/archive/refs/tags/${TAG}.tar.gz"
          mkdir -p work/src && tar -xzf "executorch-${TAG}.tar.gz" -C work/src
          SRC_DIR="$(echo work/src/executorch-*)"

          stage_headers() {
            src="$1"; dst="$2"
            mkdir -p "$dst"
            rsync -a --prune-empty-dirs \
              --include='*/' --include='*.h' --exclude='*' \
              "$src/" "$dst/"
          }

          OUT="jni/include/executorch"
          stage_headers "$SRC_DIR/runtime/core"           "$OUT/runtime/core"
          stage_headers "$SRC_DIR/runtime/kernel"         "$OUT/runtime/kernel"
          stage_headers "$SRC_DIR/runtime/platform"       "$OUT/runtime/platform"
          stage_headers "$SRC_DIR/extension/kernel_util"  "$OUT/extension/kernel_util"
          stage_headers "$SRC_DIR/extension/tensor"       "$OUT/extension/tensor"
          stage_headers "$SRC_DIR/extension/threadpool"   "$OUT/extension/threadpool"

          test -d "$OUT/runtime/core" || { echo "ERROR: headers not staged."; exit 1; }

      - name: Stage artifact tree under dist/
        run: |
          set -euo pipefail
          rm -f dist
          mkdir -p dist/jni dist/libs
          # keep your requested layout inside dist
          cp -a jni/include dist/jni/
          mkdir -p dist/libs/arm64-v8a
          cp -a libs/arm64-v8a/. dist/libs/arm64-v8a/

      - name: Include license files
        run: |
          set -euo pipefail
          SRC_DIR="$(echo work/src/executorch-*)"
          mkdir -p dist
          for f in LICENSE LICENSE-binaries; do
            [ -f "${SRC_DIR}/${f}" ] && cp "${SRC_DIR}/${f}" dist/
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: executorch-android-arm64-v8a-${{ env.VERSION }}
          path: |
            dist/jni
            dist/libs
            dist/LICENSE*
