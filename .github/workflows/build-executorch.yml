name: build-executorch-android
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-arm64:
    runs-on: ubuntu-22.04
    env:
      ANDROID_ABI: arm64-v8a
      ANDROID_API: 26
      BUILD_TYPE: Release
      EXECUTORCH_VER: v0.7.0

    steps:
      - uses: actions/checkout@v4

      - name: Setup CMake
        uses: lukka/get-cmake@v3.30.3

      - name: Setup Android NDK r27b
        id: ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27b

      - name: Clone ExecuTorch ${{ env.EXECUTORCH_VER }}
        run: |
          git clone --branch "${EXECUTORCH_VER}" --depth 1 https://github.com/pytorch/executorch.git
          cd executorch
          git submodule update --init --recursive

      - name: Install Python deps
        working-directory: executorch
        run: python3 -m pip install -r requirements-dev.txt

      - name: Prepare
        working-directory: executorch
        run: bash ./install_executorch.sh --clean

      - name: Python deps for codegen/buck2
        working-directory: executorch
        run: python3 -m pip install -r requirements-dev.txt
      
      - name: Install PyTorch (CPU wheel)
        run: python3 -m pip install --index-url https://download.pytorch.org/whl/test/cpu torch

      - name: Upgrade pip build base
        run: python3 -m pip install -U "pip>=24" "setuptools>=70" "wheel>=0.43" "packaging>=24.2"
      
      - name: Install ExecuTorch (Python)
        run: python3 -m pip install "executorch>=0.7,<0.8"
      
      - name: Prepare PYTHONPATH and sitecustomize
        working-directory: executorch
        run: |
          : > sitecustomize.py
          echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
            
      - name: Check codegen imports
        working-directory: executorch
        run: |
          python3 - <<'PY'
          import os, sys
          print("PYTHONPATH =", os.environ.get("PYTHONPATH"))
          import executorch
          import executorch.codegen
          import torchgen
          print("imports OK")
          PY
          
      - name: Configure (Android + XNNPACK)
        working-directory: executorch
        env:
          ANDROID_NDK: ${{ steps.ndk.outputs.ndk-path }}
        run: |
          rm -rf cmake-android-out
          cmake -S . -B cmake-android-out \
            -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${ANDROID_ABI} \
            -DANDROID_PLATFORM=android-${ANDROID_API} \
            -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DEXECUTORCH_BUILD_XNNPACK=ON \
            -DEXECUTORCH_BUILD_EXTENSION_DATA_LOADER=ON \
            -DEXECUTORCH_BUILD_EXTENSION_MODULE=ON \
            -DEXECUTORCH_BUILD_EXTENSION_FLAT_TENSOR=ON \
            -DEXECUTORCH_BUILD_EXTENSION_TENSOR=ON

      - name: Prepare c10 headers (single stage, fetch .in with tag fallback)
        working-directory: executorch
        shell: bash
        run: |
          set -euo pipefail

          mkdir -p jni/include

          # 1) Copy ExecuTorch vendored c10 (avoid double c10/c10)
          VROOT=runtime/core/portable_type
          if [ ! -d "${VROOT}/c10" ]; then
            echo "ERROR: ${VROOT}/c10 not found." 1>&2
            exit 1
          fi
          rsync -a "${VROOT}/" jni/include/

          # 2) If Macros.h already uses torch/headeronly, generation is not needed
          if grep -q 'torch/headeronly/macros/Macros.h' jni/include/c10/macros/Macros.h 2>/dev/null; then
            echo "Info: c10/macros/Macros.h uses torch/headeronly; no cmake_macros.h generation needed."
            exit 0
          fi

          # 3) If generated header is missing, try build tree first; else generate from .in
          if [ ! -f jni/include/c10/macros/cmake_macros.h ]; then
            GEN=$(find cmake-android-out -type f -path '*/c10/macros/cmake_macros.h' | head -n1 || true)
            if [ -n "${GEN:-}" ]; then
              mkdir -p jni/include/c10/macros
              cp -f "$GEN" jni/include/c10/macros/
            else
              # 3a) Sparse checkout PyTorch and pull only c10/macros; if missing on main, fallback to known tags
              tmpdir=$(mktemp -d)
              trap 'rm -rf "$tmpdir"' EXIT

              git init "$tmpdir/pytorch" >/dev/null
              git -C "$tmpdir/pytorch" remote add origin https://github.com/pytorch/pytorch.git
              git -C "$tmpdir/pytorch" sparse-checkout init --cone
              git -C "$tmpdir/pytorch" sparse-checkout set c10/macros

              # Try main first, then fall back to tags where the file is known to exist
              found_in=""
              for ref in main v2.4.0 v2.3.1 v2.2.0; do
                echo "Fetching PyTorch ref: $ref"
                if git -C "$tmpdir/pytorch" fetch --depth 1 origin "$ref" >/dev/null 2>&1; then
                  git -C "$tmpdir/pytorch" checkout --force FETCH_HEAD >/dev/null 2>&1 || true
                  test -f "$tmpdir/pytorch/c10/macros/cmake_macros.h.in" && { found_in="$ref"; break; }
                fi
              done
              if [ -z "$found_in" ]; then
                echo "ERROR: cmake_macros.h.in not found on main nor fallback tags (v2.4.0/v2.3.1/v2.2.0)." 1>&2
                echo "       Your vendored c10 expects the legacy generated header, but upstream moved towards torch/headeronly." 1>&2
                exit 1
              fi
              echo "Using cmake_macros.h.in from ref: $found_in"

              SRC_IN="$tmpdir/pytorch/c10/macros/cmake_macros.h.in"

              # 3b) Minimal CMake to run only configure_file()
              printf '%s\n' \
                'cmake_minimum_required(VERSION 3.13)' \
                'project(gen_c10_macros C)' \
                'configure_file("${SRC_IN}" "${DST}/cmake_macros.h" @ONLY)' \
                > "$tmpdir/CMakeLists.txt"

              cmake -S "$tmpdir" -B "$tmpdir/_b" -DSRC_IN="$SRC_IN" -DDST="$tmpdir/_out" >/dev/null

              if [ ! -f "$tmpdir/_out/cmake_macros.h" ]; then
                echo "ERROR: Failed to generate c10/macros/cmake_macros.h." 1>&2
                exit 1
              fi

              mkdir -p jni/include/c10/macros
              cp -f "$tmpdir/_out/cmake_macros.h" jni/include/c10/macros/
              echo "Generated: jni/include/c10/macros/cmake_macros.h"
            fi
          fi

          # 4) Final assert
          test -f jni/include/c10/macros/cmake_macros.h || { echo "ERROR: c10/macros/cmake_macros.h missing." 1>&2; exit 1; }

      - name: Build
        working-directory: executorch
        run: cmake --build cmake-android-out -j

      - name: Package headers & libs
        working-directory: executorch
        env:
          ABI: ${{ env.ANDROID_ABI }}
        run: |
          set -euo pipefail
          mkdir -p jni/include libs/${ABI}
      
          rsync -a --prune-empty-dirs --include '*/' --include '*.h' --include '*.hpp' --include '*.inc' --exclude '*' ./ jni/include/executorch/
          find cmake-android-out -type f -name 'lib*.a' -print0 | xargs -0 -I{} cp -f {} libs/${ABI}/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: executorch-android-${{ env.ANDROID_ABI }}
          path: |
            executorch/jni/include
            executorch/libs/${{ env.ANDROID_ABI }}
