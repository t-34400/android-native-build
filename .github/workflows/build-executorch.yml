name: build-executorch-android
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-arm64:
    runs-on: ubuntu-22.04
    env:
      ANDROID_ABI: arm64-v8a
      ANDROID_API: 26
      BUILD_TYPE: Release
      EXECUTORCH_VER: v0.7.0

    steps:
      - uses: actions/checkout@v4

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build git pkg-config python3 python3-pip rsync
          python3 -m pip install --upgrade pip zstd
          python3 -m pip install torch --index-url https://download.pytorch.org/whl/cpu

      - name: Setup CMake 3.29+
        uses: lukka/get-cmake@v3.30.3

      - name: Setup Android NDK r27b
        id: ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27b

      - name: Clone ExecuTorch ${{ env.EXECUTORCH_VER }} with submodules
        run: |
          git clone --branch "${EXECUTORCH_VER}" --depth 1 https://github.com/pytorch/executorch.git
          cd executorch
          git submodule update --init --recursive

      - name: Configure (core + extensions)
        working-directory: executorch
        env:
          ANDROID_NDK: ${{ steps.ndk.outputs.ndk-path }}
        run: |
          cmake -S . -B build-android \
            -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${ANDROID_ABI} \
            -DANDROID_PLATFORM=android-${ANDROID_API} \
            -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DBUILD_TESTING=OFF \
            -DEXECUTORCH_ENABLE_LOGGING=ON \
            -DEXECUTORCH_LOG_LEVEL=Info \
            -DEXECUTORCH_BUILD_XNNPACK=ON \
            -DEXECUTORCH_BUILD_EXTENSION_FLAT_TENSOR=ON \
            -DEXECUTORCH_BUILD_EXTENSION_MODULE=ON \
            -DEXECUTORCH_BUILD_EXTENSION_DATA_LOADER=ON \
            -DEXECUTORCH_BUILD_EXTENSION_TENSOR=ON \
            -DEXECUTORCH_BUILD_EXTENSION_RUNNER_UTIL=ON \
            -DEXECUTORCH_BUILD_KERNELS_OPTIMIZED=ON \
            -DEXECUTORCH_BUILD_KERNELS_QUANTIZED=OFF \
            -DCMAKE_INSTALL_PREFIX=$PWD/jni \
            -DCMAKE_INSTALL_INCLUDEDIR=include \
            -DCMAKE_INSTALL_LIBDIR=libs/${ANDROID_ABI}
            
      - name: Build & Install ExecuTorch
        working-directory: executorch
        run: |
          test -d build-android || { echo "ERROR: build-android not found. Run the Configure step first."; exit 2; }
          cmake --build build-android --config "$BUILD_TYPE" --target install

      - name: Collect headers
        working-directory: executorch
        env:
          DEST_INCLUDE: jni/include
        run: |
          set -euo pipefail
          SRC_BUILD="build-android"
          mkdir -p "$DEST_INCLUDE/executorch"
          rsync -a --prune-empty-dirs --include '*/' --include '*.h' --include '*.hpp' --include '*.inc' --exclude '*' executorch/ "$DEST_INCLUDE/executorch/"
          if [[ -d extension ]]; then
            rsync -a --prune-empty-dirs --include '*/' --include '*.h' --include '*.hpp' --include '*.inc' --exclude '*' extension/ "$DEST_INCLUDE/executorch/extension/"
          fi
          ROOTS_REGEX='/(c10|ATen|torch|executorch|extension|kineto|onnx|fmt)/.*'
          mapfile -t FILES < <(find "$SRC_BUILD" -type f \( -name '*.h' -o -name '*.hpp' -o -name '*.inc' -o -name '*.pb.h' \) -not -path '*/CMakeFiles/*' | sort)
          for f in "${FILES[@]}"; do
            if [[ "$f" =~ $ROOTS_REGEX ]]; then
              rel="${BASH_REMATCH[0]}"
              [[ "$rel" =~ ^/extension/ ]] && rel="/executorch$rel"
              dest="$DEST_INCLUDE$rel"
              mkdir -p "$(dirname "$dest")"
              cp -f "$f" "$dest"
            fi
          done
          if ! test -f "$DEST_INCLUDE/c10/macros/cmake_macros.h"; then
            extra="$(find "$SRC_BUILD" -type f -path '*/c10/macros/cmake_macros.h' | head -n1 || true)"
            if [[ -n "${extra:-}" ]]; then
              mkdir -p "$DEST_INCLUDE/c10/macros"
              cp -f "$extra" "$DEST_INCLUDE/c10/macros/cmake_macros.h"
            fi
          fi
          test -f "$DEST_INCLUDE/executorch/runtime/executor/program.h" || { echo "ERROR: executorch/runtime/executor/program.h not found in $DEST_INCLUDE"; exit 2; }
          
      - name: Link shared runtime (.so) from static libs
        working-directory: executorch
        env:
          ANDROID_NDK: ${{ steps.ndk.outputs.ndk-path }}
        run: |
          set -euo pipefail
          ABI=${ANDROID_ABI}
          API=${ANDROID_API}
          TOOL=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${API}-clang++

          mkdir -p libs/${ABI}

          mapfile -t LIBS < <(
            find build-android \
              -type f -name '*.a' \
              -not -path '*/third-party/flatcc_external_project/*' \
              -print | sort
          )
          if [ ${#LIBS[@]} -eq 0 ]; then
            echo "ERROR: No static libraries found." ; exit 2
          fi

          ${TOOL} -shared -fPIC \
            -Wl,--start-group "${LIBS[@]}" -Wl,--end-group \
            -o libs/${ABI}/libexecutorch_runtime.so \
            -llog -landroid -latomic -lc++_shared

      - name: Upload ExecuTorch runtime
        uses: actions/upload-artifact@v4
        with:
          name: executorch-core-${{ env.ANDROID_ABI }}
          path: |
            executorch/jni/include
            executorch/libs/${{ env.ANDROID_ABI }}/libexecutorch_runtime.so
