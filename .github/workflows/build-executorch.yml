name: build-executorch-android
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-arm64:
    runs-on: ubuntu-22.04
    env:
      ANDROID_ABI: arm64-v8a
      ANDROID_API: 26
      BUILD_TYPE: Release
      EXECUTORCH_VER: v0.7.0

    steps:
      - uses: actions/checkout@v4

      - name: Setup CMake
        uses: lukka/get-cmake@v3.30.3

      - name: Setup Android NDK r27b
        id: ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27b

      - name: Clone ExecuTorch ${{ env.EXECUTORCH_VER }}
        run: |
          git clone --branch "${EXECUTORCH_VER}" --depth 1 https://github.com/pytorch/executorch.git
          cd executorch
          git submodule update --init --recursive

      - name: Install Python deps
        working-directory: executorch
        run: python3 -m pip install -r requirements-dev.txt

      - name: Prepare
        working-directory: executorch
        run: bash ./install_executorch.sh --clean

      - name: Python deps for codegen/buck2
        working-directory: executorch
        run: python3 -m pip install -r requirements-dev.txt
      
      - name: Install PyTorch (CPU wheel)
        run: python3 -m pip install --index-url https://download.pytorch.org/whl/test/cpu torch

      - name: Upgrade pip build base
        run: python3 -m pip install -U "pip>=24" "setuptools>=70" "wheel>=0.43" "packaging>=24.2"
      
      - name: Install ExecuTorch (Python)
        run: python3 -m pip install "executorch>=0.7,<0.8"
      
      - name: Prepare PYTHONPATH and sitecustomize
        working-directory: executorch
        run: |
          : > sitecustomize.py
          echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
            
      - name: Check codegen imports
        working-directory: executorch
        run: |
          python3 - <<'PY'
          import os, sys
          print("PYTHONPATH =", os.environ.get("PYTHONPATH"))
          import executorch
          import executorch.codegen
          import torchgen
          print("imports OK")
          PY
          
      - name: Configure (Android + XNNPACK)
        working-directory: executorch
        env:
          ANDROID_NDK: ${{ steps.ndk.outputs.ndk-path }}
        run: |
          rm -rf cmake-android-out
          cmake -S . -B cmake-android-out \
            -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${ANDROID_ABI} \
            -DANDROID_PLATFORM=android-${ANDROID_API} \
            -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DEXECUTORCH_BUILD_XNNPACK=ON \
            -DEXECUTORCH_BUILD_EXTENSION_DATA_LOADER=ON \
            -DEXECUTORCH_BUILD_EXTENSION_MODULE=ON \
            -DEXECUTORCH_BUILD_EXTENSION_FLAT_TENSOR=ON \
            -DEXECUTORCH_BUILD_EXTENSION_TENSOR=ON

      - name: Prepare full c10
        working-directory: executorch
        shell: bash
        env:
          # Pin to a PyTorch ref that matches your ExecuTorch drop.
          # You can change this to main or another tag if needed.
          PYTORCH_REF: v2.4.0
        run: |
          set -euo pipefail

          mkdir -p jni/include
          rm -rf jni/include/c10

          # 1) Sparse-checkout the entire c10 tree from PyTorch at a pinned ref
          tmp=$(mktemp -d)
          trap 'rm -rf "$tmp"' EXIT

          git init "$tmp/pt" >/dev/null
          git -C "$tmp/pt" remote add origin https://github.com/pytorch/pytorch.git
          git -C "$tmp/pt" sparse-checkout init --cone
          git -C "$tmp/pt" sparse-checkout set c10

          if git -C "$tmp/pt" fetch --depth 1 origin "$PYTORCH_REF" >/dev/null 2>&1; then
            git -C "$tmp/pt" checkout --force FETCH_HEAD >/dev/null 2>&1 || true
          else
            echo "WARN: PYTORCH_REF=${PYTORCH_REF} not found; falling back to main"
            git -C "$tmp/pt" fetch --depth 1 origin main >/dev/null
            git -C "$tmp/pt" checkout --force FETCH_HEAD >/dev/null 2>&1 || true
          fi

          # Copy the entire c10 (includes macros/, util/, core/, torch/headeronly/, etc.)
          rsync -a "$tmp/pt/c10/" "jni/include/c10/"

          # 2) Generate c10/macros/cmake_macros.h if Macros.h requires it
          NEEDS_GEN=0
          if grep -q '#include <c10/macros/cmake_macros.h>' jni/include/c10/macros/Macros.h 2>/dev/null; then
            NEEDS_GEN=1
          fi

          if [ "$NEEDS_GEN" -eq 1 ] && [ ! -f jni/include/c10/macros/cmake_macros.h ]; then
            if [ -f "$tmp/pt/c10/macros/cmake_macros.h.in" ]; then
              printf '%s\n' \
                'cmake_minimum_required(VERSION 3.13)' \
                'project(gen_c10_macros C)' \
                'configure_file("${SRC_IN}" "${DST}/cmake_macros.h" @ONLY)' \
                > "$tmp/CMakeLists.txt"
              cmake -S "$tmp" -B "$tmp/_b" \
                    -DSRC_IN="$tmp/pt/c10/macros/cmake_macros.h.in" \
                    -DDST="$tmp/_out" >/dev/null
              test -f "$tmp/_out/cmake_macros.h" || { echo "ERROR: Failed to generate c10/macros/cmake_macros.h."; exit 1; }
              mkdir -p jni/include/c10/macros
              cp -f "$tmp/_out/cmake_macros.h" jni/include/c10/macros/
              echo "Generated: jni/include/c10/macros/cmake_macros.h"
            else
              echo "WARN: cmake_macros.h.in not present at ${PYTORCH_REF}; Macros.h may be headeronly-based."
            fi
          fi

          # 3) Final asserts: ensure the macro plumbing exists
          test -f jni/include/c10/macros/Macros.h || { echo "ERROR: c10/macros/Macros.h missing."; exit 1; }
          if grep -q '#include <c10/macros/cmake_macros.h>' jni/include/c10/macros/Macros.h; then
            test -f jni/include/c10/macros/cmake_macros.h || { echo "ERROR: c10/macros/cmake_macros.h missing."; exit 1; }
          fi

      - name: Build
        working-directory: executorch
        run: cmake --build cmake-android-out -j

      - name: Package headers & libs (AArch64 filter; no explicit excludes)
        working-directory: executorch
        env:
          ABI: ${{ env.ANDROID_ABI }}
        shell: bash
        run: |
          set -euo pipefail

          mkdir -p jni/include "libs/${ABI}"

          # Headers
          rsync -a --prune-empty-dirs --include '*/' --include '*.h' --include '*.hpp' --include '*.inc' --exclude '*' ./ jni/include/executorch/

          # NDK llvm tools (fallback to PATH tools if not found)
          HOST_BIN="linux-x86_64"
          case "$(uname -s)" in
            Darwin) HOST_BIN="darwin-x86_64" ;;
            MINGW*|MSYS*|CYGWIN*) HOST_BIN="windows-x86_64" ;;
          esac
          TOOLBIN="${ANDROID_NDK_HOME:-}/toolchains/llvm/prebuilt/${HOST_BIN}/bin"
          READOBJ="${TOOLBIN}/llvm-readobj"
          ARBIN="${TOOLBIN}/llvm-ar"
          command -v "$READOBJ" >/dev/null 2>&1 || READOBJ=llvm-readobj
          command -v "$ARBIN"   >/dev/null 2>&1 || ARBIN=llvm-ar

          copied=0

          # Copy only AArch64 libs (.a/.so)
          while IFS= read -r -d '' lib; do
            base="$(basename "$lib")"

            if [[ "$base" == *.so ]]; then
              if "$READOBJ" --file-headers "$lib" | grep -q "Machine: AArch64"; then
                echo "Copy SO (AArch64): $base"
                cp -f "$lib" "libs/${ABI}/"
                copied=$((copied+1))
              else
                echo "Skip SO (non-AArch64): $base"
              fi
            elif [[ "$base" == *.a ]]; then
              first_obj="$("$ARBIN" t "$lib" | head -n1 || true)"
              if [[ -z "$first_obj" ]]; then
                echo "Skip AR (empty?): $base"
                continue
              fi
              tmpd="$(mktemp -d)"
              trap 'rm -rf "$tmpd"' EXIT
              (cd "$tmpd" && "$ARBIN" x "$lib" "$first_obj" >/dev/null 2>&1 || true)
              if "$READOBJ" --file-headers "$tmpd/$first_obj" | grep -q "Machine: AArch64"; then
                echo "Copy AR (AArch64): $base"
                cp -f "$lib" "libs/${ABI}/"
                copied=$((copied+1))
              else
                echo "Skip AR (non-AArch64): $base"
              fi
              rm -rf "$tmpd"
              trap - EXIT
            fi
          done < <(find cmake-android-out -type f \( -name 'lib*.a' -o -name 'lib*.so' \) -print0)

          if [[ $copied -eq 0 ]]; then
            echo "ERROR: No AArch64 libraries were packaged into libs/${ABI}." 1>&2
            exit 1
          fi

          echo "Packaged $copied AArch64 libraries into libs/${ABI}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: executorch-android-${{ env.ANDROID_ABI }}
          path: |
            executorch/jni/include
            executorch/libs/${{ env.ANDROID_ABI }}
