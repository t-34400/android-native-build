name: build-executorch-android
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-arm64:
    runs-on: ubuntu-22.04
    env:
      ANDROID_ABI: arm64-v8a
      ANDROID_API: 26
      BUILD_TYPE: Release
      EXECUTORCH_VER: v0.7.0

    steps:
      - uses: actions/checkout@v4

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build git pkg-config python3 python3-pip rsync
          python3 -m pip install --upgrade pip zstd
          python3 -m pip install torch --index-url https://download.pytorch.org/whl/cpu

      - name: Setup CMake 3.29+
        uses: lukka/get-cmake@v3.30.3

      - name: Setup Android NDK r27b
        id: ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27b

      - name: Clone ExecuTorch ${{ env.EXECUTORCH_VER }} with submodules
        run: |
          git clone --branch "${EXECUTORCH_VER}" --depth 1 https://github.com/pytorch/executorch.git
          cd executorch
          git submodule update --init --recursive

      - name: Configure (core + extensions)
        working-directory: executorch
        env:
          ANDROID_NDK: ${{ steps.ndk.outputs.ndk-path }}
        run: |
          cmake -S . -B build-android \
            -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${ANDROID_ABI} \
            -DANDROID_PLATFORM=android-${ANDROID_API} \
            -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DBUILD_TESTING=OFF \
            -DEXECUTORCH_ENABLE_LOGGING=ON \
            -DEXECUTORCH_LOG_LEVEL=Info \
            -DEXECUTORCH_BUILD_XNNPACK=ON \
            -DEXECUTORCH_BUILD_EXTENSION_FLAT_TENSOR=ON \
            -DEXECUTORCH_BUILD_EXTENSION_MODULE=ON \
            -DEXECUTORCH_BUILD_EXTENSION_DATA_LOADER=ON \
            -DEXECUTORCH_BUILD_EXTENSION_TENSOR=ON \
            -DEXECUTORCH_BUILD_EXTENSION_RUNNER_UTIL=ON \
            -DEXECUTORCH_BUILD_KERNELS_OPTIMIZED=ON \
            -DEXECUTORCH_BUILD_KERNELS_QUANTIZED=OFF \
            -DCMAKE_INSTALL_PREFIX=$PWD/cmake-out-android

      - name: Build & Install (core)
        working-directory: executorch
        run: cmake --build build-android -j --target install

      - name: Stage ExecuTorch headers
        working-directory: executorch
        shell: bash
        run: |
          set -euo pipefail
          OUT="${OUT:-sdk}"
          BUILD_DIR="${BUILD_DIR:-cmake-out-android}"
          ABIS="${ABIS:-arm64-v8a}"
      
          rm -rf "$OUT"
          mkdir -p "$OUT/include" "$OUT/libs"
      
          copy_hdrs () {
            local src="$1" dst="$2"
            [ -d "$src" ] || return 0
            rsync -a --prune-empty-dirs \
              --include '*/' \
              --include '*.h' --include '*.hpp' --include '*.hh' --include '*.hxx' \
              --include '*.inl' --include '*.inc' --include '*.cuh' \
              --exclude '*' "$src"/ "$dst"/
          }
      
          EXCLUDES='^(\.|\.git|\.github|docs|third-party|third_party|cmake-out-android|build|jni|libs|sdk)$'
          for d in *; do
            if [ -d "$d" ] && [[ ! "$d" =~ $EXCLUDES ]]; then
              mkdir -p "$OUT/include/executorch/$d"
              copy_hdrs "$d" "$OUT/include/executorch/$d"
            fi
          done
      
          while IFS= read -r -d '' pdir; do
            base="$(basename "$pdir")"; parent="$(basename "$(dirname "$pdir")")"
            if [ "$base" = "$parent" ]; then
              mkdir -p "$OUT/include/$base"
              copy_hdrs "$pdir" "$OUT/include/$base"
            fi
          done < <(find . -type d -path '*/portable_type/*/*' -print0)
      
          for tp in third-party third_party; do
            [ -d "$tp" ] || continue
            while IFS= read -r -d '' incdir; do
              rsync -a --prune-empty-dirs \
                --include '*/' \
                --include '*.h' --include '*.hpp' --include '*.hh' --include '*.hxx' \
                --include '*.inl' --include '*.inc' --include '*.cuh' \
                --exclude '*' "$incdir"/ "$OUT/include"/
            done < <(find "$tp" -type d -name include -print0)
            if [ -d "$tp/pytorch/aten/src/ATen" ]; then
              mkdir -p "$OUT/include/ATen"
              copy_hdrs "$tp/pytorch/aten/src/ATen" "$OUT/include/ATen"
            fi
          done
      
          if [ -d "$BUILD_DIR/include" ]; then
            rsync -a "$BUILD_DIR/include/"/ "$OUT/include/"/
          fi
      
          for abi in $ABIS; do
            abi_out="$OUT/libs/$abi"; mkdir -p "$abi_out"
            var="BUILD_DIR_${abi//-/_}"; eval abi_build="\${$var:-$BUILD_DIR}"
            [ -d "$abi_build" ] || continue
            cp -f "$abi_build"/*.so "$abi_out"/ 2>/dev/null || true
            if [ -d "$abi_build/lib" ]; then
              cp -f "$abi_build/lib"/*.so "$abi_out"/ 2>/dev/null || true
            fi
          done
      
          test -f "$OUT/include/executorch/runtime/executor/program.h" || { echo "ERROR: missing $OUT/include/executorch/runtime/executor/program.h"; exit 3; }
          test -f "$OUT/include/executorch/extension/module/module.h" || { echo "ERROR: missing $OUT/include/executorch/extension/module/module.h"; exit 3; }
          test -f "$OUT/include/c10/util/irange.h" || { echo "ERROR: missing $OUT/include/c10/util/irange.h"; exit 3; }
          
      - name: Link shared runtime (.so) from static libs
        working-directory: executorch
        env:
          ANDROID_NDK: ${{ steps.ndk.outputs.ndk-path }}
        run: |
          set -euo pipefail
          ABI=${ANDROID_ABI}
          API=${ANDROID_API}
          TOOL=${ANDROID_NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android${API}-clang++

          mkdir -p libs/${ABI}

          mapfile -t LIBS < <(
            find build-android \
              -type f -name '*.a' \
              -not -path '*/third-party/flatcc_external_project/*' \
              -print | sort
          )
          if [ ${#LIBS[@]} -eq 0 ]; then
            echo "ERROR: No static libraries found." ; exit 2
          fi

          ${TOOL} -shared -fPIC \
            -Wl,--start-group "${LIBS[@]}" -Wl,--end-group \
            -o libs/${ABI}/libexecutorch_runtime.so \
            -llog -landroid -latomic -lc++_shared

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: executorch-core-${{ env.ANDROID_ABI }}
          path: |
            executorch/jni/include/**
            executorch/libs/${{ env.ANDROID_ABI }}/libexecutorch_runtime.so
