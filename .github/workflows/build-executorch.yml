name: build-executorch-android
on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-arm64:
    runs-on: ubuntu-22.04
    env:
      ANDROID_ABI: arm64-v8a
      ANDROID_API: 26
      BUILD_TYPE: Release
      EXECUTORCH_VER: v0.7.0

    steps:
      - uses: actions/checkout@v4

      - name: Setup CMake
        uses: lukka/get-cmake@v3.30.3

      - name: Setup Android NDK r27b
        id: ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27b

      - name: Clone ExecuTorch ${{ env.EXECUTORCH_VER }}
        run: |
          git clone --branch "${EXECUTORCH_VER}" --depth 1 https://github.com/pytorch/executorch.git
          cd executorch
          git submodule update --init --recursive

      - name: Install Python deps
        working-directory: executorch
        run: python3 -m pip install -r requirements-dev.txt

      - name: Prepare c10 headers (single stage)
        working-directory: executorch
        shell: bash
        run: |
          set -euo pipefail
      
          mkdir -p jni/include
      
          VROOT=runtime/core/portable_type
          if [ ! -d "${VROOT}/c10" ]; then
            echo "ERROR: ${VROOT}/c10 not found." 1>&2
            exit 1
          fi
          rsync -a "${VROOT}/" jni/include/
      
          if [ ! -f jni/include/c10/macros/cmake_macros.h ]; then
            GEN=$(find cmake-android-out -type f -path '*/c10/macros/cmake_macros.h' | head -n1 || true)
            if [ -n "${GEN:-}" ]; then
              mkdir -p jni/include/c10/macros
              cp -f "$GEN" jni/include/c10/macros/
            else
              tmpdir=$(mktemp -d)
              pushd "$tmpdir" >/dev/null
              git init pytorch >/dev/null
              cd pytorch
              git remote add origin https://github.com/pytorch/pytorch.git
              git sparse-checkout init --cone
              git sparse-checkout set c10/macros
              git pull --depth 1 origin main >/dev/null
              popd >/dev/null
              cmake -S "$tmpdir/pytorch/c10/macros" -B "$tmpdir/_c10macros" >/dev/null
              if [ ! -f "$tmpdir/_c10macros/cmake_macros.h" ]; then
                echo "ERROR: Failed to generate c10/macros/cmake_macros.h." 1>&2
                exit 1
              fi
              mkdir -p jni/include/c10/macros
              cp -f "$tmpdir/_c10macros/cmake_macros.h" jni/include/c10/macros/
              rm -rf "$tmpdir"
            fi
          fi
      
          test -f jni/include/c10/macros/cmake_macros.h || { echo "ERROR: c10/macros/cmake_macros.h missing." 1>&2; exit 1; }

      - name: Prepare
        working-directory: executorch
        run: bash ./install_executorch.sh --clean

      - name: Python deps for codegen/buck2
        working-directory: executorch
        run: python3 -m pip install -r requirements-dev.txt
      
      - name: Install PyTorch (CPU wheel)
        run: python3 -m pip install --index-url https://download.pytorch.org/whl/test/cpu torch

      - name: Upgrade pip build base
        run: python3 -m pip install -U "pip>=24" "setuptools>=70" "wheel>=0.43" "packaging>=24.2"
      
      - name: Install ExecuTorch (Python)
        run: python3 -m pip install "executorch>=0.7,<0.8"
      
      - name: Prepare PYTHONPATH and sitecustomize
        working-directory: executorch
        run: |
          : > sitecustomize.py
          echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
            
      - name: Check codegen imports
        working-directory: executorch
        run: |
          python3 - <<'PY'
          import os, sys
          print("PYTHONPATH =", os.environ.get("PYTHONPATH"))
          import executorch
          import executorch.codegen
          import torchgen
          print("imports OK")
          PY
          
      - name: Configure (Android + XNNPACK)
        working-directory: executorch
        env:
          ANDROID_NDK: ${{ steps.ndk.outputs.ndk-path }}
        run: |
          rm -rf cmake-android-out
          cmake -S . -B cmake-android-out \
            -DCMAKE_TOOLCHAIN_FILE=${ANDROID_NDK}/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${ANDROID_ABI} \
            -DANDROID_PLATFORM=android-${ANDROID_API} \
            -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DEXECUTORCH_BUILD_XNNPACK=ON \
            -DEXECUTORCH_BUILD_EXTENSION_DATA_LOADER=ON \
            -DEXECUTORCH_BUILD_EXTENSION_MODULE=ON \
            -DEXECUTORCH_BUILD_EXTENSION_FLAT_TENSOR=ON \
            -DEXECUTORCH_BUILD_EXTENSION_TENSOR=ON

      - name: Build
        working-directory: executorch
        run: cmake --build cmake-android-out -j

      - name: Package headers & libs
        working-directory: executorch
        env:
          ABI: ${{ env.ANDROID_ABI }}
        run: |
          set -euo pipefail
          mkdir -p jni/include libs/${ABI}
      
          rsync -a --prune-empty-dirs --include '*/' --include '*.h' --include '*.hpp' --include '*.inc' --exclude '*' ./ jni/include/executorch/
      
          VROOT=runtime/core/portable_type
          if [ ! -d "${VROOT}/c10" ]; then
            echo "ERROR: ${VROOT}/c10 not found (ExecuTorch vendored c10)." 1>&2
            exit 1
          fi
          mkdir -p jni/include/c10
          rsync -a "${VROOT}/c10/" jni/include/c10/
      
          if [ -d "${VROOT}/c10/torch/headeronly" ]; then
            mkdir -p jni/include/c10/torch/headeronly
            rsync -a "${VROOT}/c10/torch/headeronly/" jni/include/c10/torch/headeronly/
          fi
      
          find cmake-android-out -type f -name 'lib*.a' -print0 | xargs -0 -I{} cp -f {} libs/${ABI}/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: executorch-android-${{ env.ANDROID_ABI }}
          path: |
            executorch/jni/include
            executorch/libs/${{ env.ANDROID_ABI }}
